from dataclasses import dataclass, field
from typing import List

from agents.utils.memory import FinancialSituationMemory


@dataclass
class InvestmentDebateState:
    bull_history: str = ""  # Bullish Conversation history
    bear_history: str = ""  # Bearish Conversation history
    history: str = ""  # Conversation history
    current_response: str = ""  # Latest response
    judge_decision: str = ""  # Final judge decision
    count: int = 0  # Length of the current conversation


@dataclass
class RiskDebateState:
    risky_history: str = ""  # Risky Agent's Conversation history
    safe_history: str = ""  # Safe Agent's Conversation history
    neutral_history: str = ""  # Neutral Agent's Conversation history
    history: str = ""  # Conversation history
    latest_speaker: str = ""  # Analyst that spoke last
    current_risky_response: str = ""  # Latest response by the risky analyst
    current_safe_response: str = ""  # Latest response by the safe analyst
    current_neutral_response: str = ""  # Latest response by the neutral analyst
    judge_decision: str = ""  # Judge's decision
    count: int = 0  # Length of the current conversation


@dataclass
class AgentState:
    messages: List[dict] = field(
        default_factory=list
    )  # Conversation messages {"role": "content", "content": "message"}

    company_of_interest: str = ""  # Company that we are interested in trading
    trade_date: str = ""  # What date we are trading at
    sender: str = ""  # Agent that sent this message

    # research step
    market_report: str = ""  # Report from the Market Analyst
    sentiment_report: str = ""  # Report from the Social Media Analyst
    news_report: str = ""  # Report from the News Researcher of current world affairs
    fundamentals_report: str = ""  # Report from the Fundamentals Researcher

    # researcher team discussion step
    investment_debate_state: InvestmentDebateState = field(
        default_factory=InvestmentDebateState
    )  # Current state of the debate on if to invest or not
    investment_plan: str = ""  # Plan generated by the Analyst
    trader_investment_plan: str = ""  # Plan generated by the Trader

    # risk management team discussion step
    risk_debate_state: RiskDebateState = field(
        default_factory=RiskDebateState
    )  # Current state of the debate on evaluating risk
    final_trade_decision: str = ""  # Final decision made by the Risk Analysts


# TODO: Can this be actor.cache?
async def memory_init(
    name: str,
    embedding: str = "text-embedding-3-small",
    dimension: int = 1536,
    region_name: str = "us-east-2",
    bucket_name: str = "text-embeddings",
) -> FinancialSituationMemory:
    """Initialize the memory for the trading agents."""
    memory = FinancialSituationMemory(name, embedding, dimension, region_name, bucket_name)
    return memory
